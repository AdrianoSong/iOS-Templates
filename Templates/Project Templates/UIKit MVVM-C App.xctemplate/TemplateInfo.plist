<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Identifier</key>
	<string>br.com.adrianosong.uikit.mvvmcApplication</string>
	<key>Ancestors</key>
	<array>
		<string>com.apple.dt.unit.coreDataCocoaTouchApplication</string>
	</array>
	<key>Concrete</key>
	<true/>
	<key>Description</key>
	<string>This template provides a starting point for an UIKit application that uses a single view with MVVM achitecture and Coordinator pattern. It provides a view controller to manage the view, coordinator for navigation between view controllers and viewmodel for view rules, no storyboard or nib file.</string>
	<key>SortOrder</key>
	<integer>1</integer>
	<key>NameOfInitialFileForEditor</key>
	<string>ContentView.swift</string>
	<key>Options</key>
	<array>
		<dict>
			<key>Identifier</key>
			<string>languageChoice</string>
			<key>Units</key>
			<dict>
				<key>Objective-C</key>
				<dict>
					<key>Nodes</key>
					<array>
						<string>ViewController.h:comments</string>
						<string>ViewController.h:imports:importCocoa</string>
						<string>ViewController.h:interface(___FILEBASENAME___ : UIViewController)</string>
						<string>ViewController.m:comments</string>
						<string>ViewController.m:imports:importHeader:ViewController.h</string>
						<string>ViewController.m:extension</string>
						<string>ViewController.m:implementation:methods:viewDidLoad(- (void\)viewDidLoad)</string>
						<string>ViewController.m:implementation:methods:viewDidLoad:super</string>
						<string>Info.plist:UIMainStoryboardFile</string>
						<string>Info.plist:UIApplicationSceneManifest:UISceneStoryboardFile</string>
						<string>Base.lproj/Main.storyboard</string>
					</array>
					<key>Definitions</key>
					<dict>
						<key>Base.lproj/Main.storyboard</key>
						<dict>
							<key>Path</key>
							<string>Main.storyboard</string>
							<key>SortOrder</key>
							<integer>98</integer>
						</dict>
						<key>Info.plist:UIMainStoryboardFile</key>
						<string>&lt;key&gt;UIMainStoryboardFile&lt;/key&gt;
                            &lt;string&gt;Main&lt;/string&gt;
                        </string>
					</dict>
				</dict>
				<key>Swift</key>
				<array>
					<dict>
						<key>RequiredOptions</key>
						<dict>
							<key>userInterface</key>
							<string>No Storyboard</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>ViewController.swift:comments</string>
							<string>ViewController.swift:imports:importCocoa</string>
							<string>ViewController.swift:implementation(___FILEBASENAME___: UIViewController)</string>
							<string>ViewController.swift:implementation:properties:viewModel</string>
							<string>ViewController.swift:implementation:properties:hello</string>
							<string>ViewController.swift:implementation:methods:viewDidLoad(override func viewDidLoad(\))</string>
							<string>ViewController.swift:implementation:methods:viewDidLoad:super</string>
							<string>ViewController.swift:implementation:methods:viewDidLoad:body</string>
							<string>Info.plist:UIMainStoryboardFile</string>
							<string>Coordinator.swift</string>
							<string>AppCoordinator.swift</string>
							<string>DebugWindow.swift</string>
							<string>DebugMenuViewController.swift</string>
							<string>VCViewModel.swift</string>
							<string>BaseApi.swift</string>
							<string>ApiRouter.swift</string>
							<string>swiftlint.yml</string>
							<string>Localizable.strings</string>
						</array>
						<key>Definitions</key>
						<dict>
							<key>Base.lproj/Main.storyboard</key>
							<dict>
								<key>Path</key>
								<string>Main.storyboard</string>
								<key>SortOrder</key>
								<integer>98</integer>
							</dict>
							<key>Coordinator.swift</key>
							<dict>
								<key>Path</key>
								<string>Coordinator.swift</string>
							</dict>
							<key>AppCoordinator.swift</key>
							<dict>
								<key>Path</key>
								<string>AppCoordinator.swift</string>
							</dict>
							<key>DebugWindow.swift</key>
							<dict>
								<key>Path</key>
								<string>DebugWindow.swift</string>
							</dict>
							<key>DebugMenuViewController.swift</key>
							<dict>
								<key>Path</key>
								<string>DebugMenuViewController.swift</string>
							</dict>
							<key>VCViewModel.swift</key>
							<dict>
								<key>Path</key>
								<string>VCViewModel.swift</string>
							</dict>
							<key>BaseApi.swift</key>
							<dict>
								<key>Path</key>
								<string>BaseApi.swift</string>
							</dict>
							<key>ApiRouter.swift</key>
							<dict>
								<key>Path</key>
								<string>ApiRouter.swift</string>
							</dict>
							<key>swiftlint.yml</key>
							<dict>
								<key>Path</key>
								<string>swiftlint.yml</string>
							</dict>
							<key>Localizable.strings</key>
							<dict>
								<key>Path</key>
								<string>Localizable.strings</string>
							</dict>
							<key>Info.plist:UIMainStoryboardFile</key>
							<string></string>
							<key>AppDelegate.swift:implementation:properties:window</key>
							<string>var window: UIWindow?
var appCoordinator: AppCoordinator?</string>
							<key>AppDelegate.swift:implementation:methods:applicationdidFinishLaunchingWithOptions:body</key>
							<string>// Override point for customization after application launch.
#if DEBUG
window = DebugWindow(frame: UIScreen.main.bounds)
#else
window = UIWindow()
#endif

window?.makeKeyAndVisible()
appCoordinator = AppCoordinator(window: window)
(window as? DebugWindow)?.appCoordinator = appCoordinator
appCoordinator?.start()</string>
							<key>ViewController.swift:implementation:properties:viewModel</key>
							<string>let viewModel = VCViewModel()</string>
							<key>ViewController.swift:implementation:properties:hello</key>
							<string>fileprivate let hello: UILabel = {
	let view = UILabel()
	view.textColor = .red
	view.translatesAutoresizingMaskIntoConstraints = false
	return view
}()</string>
							<key>ViewController.swift:implementation:methods:viewDidLoad:body</key>
							<string>view.addSubview(hello)
hello.centerYAnchor.constraint(
    equalTo: view.centerYAnchor).isActive = true
hello.centerXAnchor.constraint(
    equalTo: view.centerXAnchor).isActive = true
	
hello.text = viewModel.sayHello()</string>
						</dict>
						<key>Targets</key>
						<array>
							<dict>
								<key>BuildPhases</key>
								<array>
									<dict>
										<key>Class</key>
										<string>ShellScript</string>
										<key>ShellPath</key>
										<string>/bin/sh</string>
										<key>ShellScript</key>
										<string>if which swiftlint >/dev/null; then
  swiftlint
else
  echo "warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint"
fi</string>
									</dict>
								</array>
							</dict>
						</array>
					</dict>
					<dict>
						<key>RequiredOptions</key>
						<dict>
							<key>userInterface</key>
							<string>SwiftUI</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>ContentView.swift</string>
							<string>Preview Content/Preview Assets.xcassets</string>
							<string>SceneDelegate.swift:imports:importSwiftUI</string>
							<string>SceneDelegate.swift:implementation:methods:sceneWillConnectToSession:body</string>
							<string>SceneDelegate.swift:implementation:methods:sceneWillConnectToSession:body:windowScene</string>
						</array>
						<key>Definitions</key>
						<dict>
							<key>ContentView.swift</key>
							<dict>
								<key>SortOrder</key>
								<integer>99</integer>
								<key>Path</key>
								<string>ContentView.swift</string>
							</dict>
							<key>Preview Content/Preview Assets.xcassets</key>
							<dict>
								<key>SortOrder</key>
								<integer>100</integer>
								<key>Path</key>
								<string>Preview Assets.xcassets</string>
								<key>Group</key>
								<string>Preview Content</string>
							</dict>
							<key>SceneDelegate.swift:implementation:methods:sceneWillConnectToSession:body</key>
							<string>
// Create the SwiftUI view that provides the window contents.
let contentView = ContentView()
</string>
							<key>SceneDelegate.swift:implementation:methods:sceneWillConnectToSession:body:windowScene</key>
							<string>
// Use a UIHostingController as window root view controller.
if let windowScene = scene as? UIWindowScene {
    let window = UIWindow(windowScene: windowScene)
    window.rootViewController = UIHostingController(rootView: contentView)
    self.window = window
    window.makeKeyAndVisible()
}</string>
							<key>*:imports:importSwiftUI</key>
							<string>import SwiftUI</string>
						</dict>
						<key>Targets</key>
						<array>
							<dict>
								<key>SharedSettings</key>
								<dict>
									<key>ENABLE_PREVIEWS</key>
									<string>YES</string>
									<key>DEVELOPMENT_ASSET_PATHS</key>
									<string>___PACKAGENAMEPREVIEWCONTENT:quoteIfNeeded___</string>
								</dict>
							</dict>
						</array>
					</dict>
					<dict>
						<key>RequiredOptions</key>
						<dict>
							<key>userInterface</key>
							<string>SwiftUI</string>
							<key>coreData</key>
							<string>true</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>SceneDelegate.swift:implementation:methods:sceneWillConnectToSession:body</string>
						</array>
						<key>Definitions</key>
						<dict>
							<key>SceneDelegate.swift:implementation:methods:sceneWillConnectToSession:body</key>
							<string>
// Get the managed object context from the shared persistent container.
let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext

// Create the SwiftUI view and set the context as the value for the managedObjectContext environment keyPath.
// Add `@Environment(\.managedObjectContext)` in the views that will need the context.
let contentView = ContentView().environment(\.managedObjectContext, context)
</string>
						</dict>
					</dict>
				</array>
			</dict>
		</dict>
		<dict>
			<key>Identifier</key>
			<string>userInterface</string>
			<key>Name</key>
			<string>User Interface:</string>
			<key>Description</key>
			<string>The type of user interface.</string>
			<key>Values</key>
			<array>
				<string>SwiftUI</string>
				<string>No Storyboard</string>
			</array>
			<key>RequiredOptionsForValues</key>
			<dict>
				<key>SwiftUI</key>
				<dict>
					<key>languageChoice</key>
					<string>Swift</string>
				</dict>
			</dict>
			<key>Default</key>
			<string>SwiftUI</string>
			<key>Type</key>
			<string>popup</string>
		</dict>
	</array>
</dict>
</plist>
